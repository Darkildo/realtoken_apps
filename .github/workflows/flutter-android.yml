name: Build and Deploy Android APK

on:
  push:
    branches:
      - main

jobs:
  build:
    env:
      THE_GRAPH_API_KEY: ${{ secrets.THE_GRAPH_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }} 

    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.4'

    - name: Install dependencies
      run: flutter pub get

    - name: Create .env file  # ðŸ”¥ GÃ©nÃ¨re un fichier .env Ã  partir du secret
      run: echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" > .env

    - name: Decode and write google-services.json
      run: |
          echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" > env_config.txt
          echo "THE_GRAPH_API_KEY=$THE_GRAPH_API_KEY" >> env_config.txt  # ðŸ”¥ Ajoute la seconde clÃ© API

    - name: Decode and add the signing key
      run: |
        echo "${{ secrets.MY_RELEASE_KEY }}" | base64 --decode > android/app/my-release-key.jks

    - name: Debug keystore
      run: |
        ls -la android/app

    - name: Set up environment for signing
      run: |
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=my-release-key.jks" >> android/key.properties

    - name: Debug key properties
      run: |
        ls -la android/

    - name: Clean Flutter build
      run: flutter clean

    - name: Build app
      run: flutter build apk --release

    # Step to extract version from pubspec.yaml
    - name: Extract version from pubspec.yaml
      id: extract_version
      run: |
        VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //;s/+.*//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Create a GitHub Release and upload the APK
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
        files: build/app/outputs/flutter-apk/app-release.apk # Chemin du fichier APK
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
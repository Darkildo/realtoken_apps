name: Build and Deploy Flutter Web

on:
  push:
    branches:
      - main  # DÃ©clenche le workflow Ã  chaque push sur la branche "main"

jobs:
  build:
    env:
      THE_GRAPH_API_KEY: ${{ secrets.THE_GRAPH_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }} 

    name: Build Flutter Web
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.4'  # La version Flutter que vous utilisez

    # ğŸ”¥ Nettoie le projet et force la rÃ©cupÃ©ration des dÃ©pendances
    - name: Clean Flutter project
      run: flutter clean

    - name: Get dependencies
      run: flutter pub get

    # ğŸ”¥ Met Ã  jour les dÃ©pendances pour Ã©viter les erreurs avec Syncfusion
    - name: Upgrade dependencies
      run: flutter pub upgrade

    # ğŸ”¥ VÃ©rifie la version de Flutter (utile pour debug)
    - name: Check Flutter version
      run: flutter --version

    # ğŸ”¥ VÃ©rifie les fichiers prÃ©sents dans le repo (pour voir si `Agenda.dart` est bien lÃ )
    - name: List project files
      run: ls -R lib/structure/

    - name: Decode and write google-services.json
      run: |
          echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" > env_config.txt
          echo "THE_GRAPH_API_KEY=$THE_GRAPH_API_KEY" >> env_config.txt  # ğŸ”¥ Ajoute la seconde clÃ© API

    # ğŸ”¥ Compilation avec verbose pour voir les erreurs plus dÃ©taillÃ©es
    - name: Build web app
      run: flutter build web --release --web-renderer html --base-href /realtoken_apps/ --verbose

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/web  # Chemin vers les fichiers web gÃ©nÃ©rÃ©s
